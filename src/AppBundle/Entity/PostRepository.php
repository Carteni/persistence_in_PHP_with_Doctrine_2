<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository {

  /**
   * @param $id
   * @return mixed
   * @throws \Doctrine\ORM\NonUniqueResultException
   */
  public function findWithComments($id) {
    return $this
      ->createQueryBuilder('p')
      ->addSelect('c')
      ->leftJoin('p.comments', 'c')
      ->where('p.id = :id')
      ->orderBy('c.publicationDate', 'DESC')
      ->setParameter('id', $id)
      ->getQuery()
      ->getOneOrNullResult();
  }

  /**
   * @param array $tagNames
   * @return array
   *
   *
   *
   */
  public function findHavingTags(array $tagNames) {
    return $queryBuilder = $this
      ->createQueryBuilder('p')
      ->addSelect('t')
      ->addSelect('COUNT(c.id)')
      ->leftJoin('p.comments', 'c')
      ->join('p.tags', 't')
      ->where('t.name IN (:tagNames)')
      ->groupBy('p.id')
      ->having('COUNT(t.name) >= :numberOfTags')
      ->setParameter('tagNames', $tagNames)
      ->setParameter('numberOfTags', count($tagNames))
      ->getQuery()
      ->getResult();
  }

  /**
   * @return array
   */
  public function findWithCommentCount()
  {
    return $this
      ->createQueryBuilder('p')
      ->leftJoin('p.comments', 'c')
      ->addSelect('COUNT(c.id)')
      ->groupBy('p.id')
      ->getQuery()
      ->getResult();
  }
}
