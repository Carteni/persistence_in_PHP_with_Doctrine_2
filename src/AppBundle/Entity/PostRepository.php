<?php

namespace AppBundle\Entity;

use AppBundle\Interfaces\RedisDefaultCacheInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Predis\ClientInterface;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
  implements RedisDefaultCacheInterface
{

    /**
     * @var ClientInterface $client
     */
    private $client;


    /**
     * PostRepository constructor.
     * @param \Doctrine\ORM\EntityManager $em
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     * @param \Predis\ClientInterface $client
     */
    /*public function __construct($em, Mapping\ClassMetadata $class, ClientInterface $client) {
      parent::__construct($em, $class);
      $this->client = $client;
    }*/

    /**
     * @param $id
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findWithComments($id)
    {

        return $this
          ->createQueryBuilder('p')
          ->addSelect('c')
          ->leftJoin('p.comments', 'c')
          ->where('p.id = :id')
          ->orderBy('c.publicationDate', 'DESC')
          ->setParameter('id', $id)
          ->getQuery()
          ->getOneOrNullResult();
    }

    /**
     * @param array $tagNames
     * @return array
     *
     *
     *
     */
    public function findHavingTags(array $tagNames)
    {
        return $queryBuilder = $this
          ->createQueryBuilder('p')
          ->addSelect('t')
          ->addSelect('COUNT(c.id)')
          ->leftJoin('p.comments', 'c')
          ->join('p.tags', 't')
          ->where('t.name IN (:tagNames)')
          ->groupBy('p.id')
          ->having('COUNT(t.name) >= :numberOfTags')
          ->setParameter('tagNames', $tagNames)
          ->setParameter('numberOfTags', count($tagNames))
          ->getQuery()
          ->getResult();
    }

    /**
     * @return array
     */
    public function findWithCommentCount()
    {
        /*return $this
          ->createQueryBuilder('p')
          ->leftJoin('p.comments', 'c')
          ->addSelect('COUNT(c.id)')
          ->groupBy('p.id')
          ->getQuery()
          ->getResult();*/

        $cacheId = md5('postWithComments');

        $q = $this
          ->createQueryBuilder('p')
          ->leftJoin('p.comments', 'c')
          ->addSelect('COUNT(c.id)')
          ->groupBy('p.id')
          ->getQuery();


        $q->useQueryCache(true);

        //$q->useResultCache(true, 1200, $cacheId);

        return $q->getResult();
    }

    public function setDefaultCache(ClientInterface $client) {
        $this->client = $client;
    }

    public function getDefaultCache():ClientInterface
    {
        return $this->client;
    }
}
